# -*- coding: utf-8 -*-
"""ImageAlignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17nzgsdYeOt803fH-WpCS05rAhjUKeq-L
"""

import cv2
import numpy as np

# Define a function to detect the white spot in an image
def detect_white_spot(image):
    # Convert the image to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Threshold the image to create a binary mask of the white spot
    ret, mask = cv2.threshold(gray, 240, 255, cv2.THRESH_BINARY)

    # Find the contours of the white spot
    contours, hierarchy = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

    # Find the contour with the largest area (the white spot)
    max_area = 0
    max_contour = None
    for contour in contours:
        area = cv2.contourArea(contour)
        if area > max_area:
            max_area = area
            max_contour = contour

    # Get the bounding box of the white spot
    x, y, w, h = cv2.boundingRect(max_contour)

    # Return the coordinates of the center of the white spot
    return (x + w//2, y + h//2)

# Define a function to align an image based on the position of the white spot
def align_image(image, target_pos):
    # Detect the position of the white spot in the image
    source_pos = detect_white_spot(image)

    # Calculate the translation required to align the white spot with the target position
    dx = target_pos[0] - source_pos[0]
    dy = target_pos[1] - source_pos[1]

    # Apply the translation to the image
    rows, cols, channels = image.shape
    M = np.float32([[1, 0, dx], [0, 1, dy]])
    aligned_image = cv2.warpAffine(image, M, (cols, rows))

    # Return the aligned image
    return aligned_image

# Load all the images
images = []
for i in range(10):
    image = cv2.imread(f"image_{i}.jpg")
    images.append(image)

# Detect the position of the white spot in the first image
target_pos = detect_white_spot(images[0])

# Align all the images based on the position of the white spot
aligned_images = []
for image in images:
    aligned_image = align_image(image, target_pos)
    aligned_images.append(aligned_image)

# Save the aligned images
for i, image in enumerate(aligned_images):
    cv2.imwrite(f"aligned_image_{i}.jpg", image)